---
// Import the necessary CSS for AG Grid
import 'ag-grid-community/styles/ag-grid.css';
import 'ag-grid-community/styles/ag-theme-quartz.css';
---
<style>
  .ag-theme-quartz {
    font-family: monospace;
    --ag-background-color: rgb(245 245 244);
    --ag-header-background-color: rgb(245 245 244);
  }

  .ag-theme-quartz-dark {
    font-family: monospace;
    --ag-background-color: rgb(28 25 23);
    --ag-header-background-color: rgb(28 25 23);
  }
</style>

<form id="benchmarks" class="text-sm">
  <div class="flex flex-row justify-between">
    <div class="flex flex-col">
      <label for="regionSelector" class="text-base font-bold" >Select a Region</label>
      <label class="text-base font-bold" >===============</label>
      <div id="regionSelector" class="my-4 flex flex-col">
        <div>
          <input type="radio" id="seaRegionSelector" name="selectedRegion" value="sea" checked />
          <label for="seaRegionSelector">US West (Seattle)</label>
        </div>
        <div>
          <input type="radio" id="iadRegionSelector" name="selectedRegion" value="iad" />
          <label for="iadRegionSelector">US East (Virginia)</label>
        </div>
        <div>
          <input type="radio" id="cdgRegionSelector" name="selectedRegion" value="cdg" />
          <label for="cdgRegionSelector">Europe (Paris)</label>
        </div>
      </div>
    </div>
    <div class="mt-10 mb-4 text-left flex flex-col">
      <div>TTFT = Time to First Token.</div>
      <div>TPS = Tokens per Second.</div>
      <div>Total Time = Time from start to finish.</div>
    </div>
  </div>
  
  
  <div id="myGrid" class="ag-theme-quartz text-sm bg-stone-100 font-mono text-gray-950 dark:bg-stone-900 dark:text-white w-full"></div>
  <div class="mt-4 flex flex-row justify-between text-sm items-center">
    <div>
      <p class="inline-flex">
        <div class="inline-flex items-center"><span class="text-center rounded-md bg-green-500 px-2 py-1 text-sm ring-1 ring-inset ring-gray-500/10 w-14">Green</span><span>&nbsp;= best.</span></div>
        <div class="inline-flex items-center"><span class="text-center rounded-md bg-red-500 px-2 py-1 text-sm ring-1 ring-inset ring-gray-500/10 w-14">Red</span><span>&nbsp;= worst.</span></div>
      </p>
    </div>
    <div id="lastUpdated" class=" font-mono italic text-right"></div>
  </div>
</form>

<script>
  import { createGrid } from 'ag-grid-community';
  import { BenchmarkRegions, gridOptions, WorstColor, BestColor, TTFTDefinition, TPSDefinition, TotalTimeDefinition } from '@/utils/DataGridDefinitions.ts';
  import { generateColor } from '@/utils/DataGridColors.js';
  import { fetchLocalJsonFile } from '@/utils/FetchData.ts';

  let gridApi;
  const localData = '../../data/latest.json';
  let gridData = [];
  let selectedRegion = 'sea';
  let selectedRegionData = [];
  
  function setGridData(region, gridData) {
    selectedRegion = region;
    gridData.forEach((regionData) => {
      if (regionData.region === region) {
        selectedRegionData = regionData.results;
        gridApi.setGridOption("rowData", selectedRegionData);
      }
    });
  };

  // Returns the background color for the cell based on the value
  function colFunction(params) {
    const currentColumnID = params.column.colId;
    TTFTDefinition.bestPerformance;
    TPSDefinition.bestPerformance;
    TotalTimeDefinition.bestPerformance;

    // TTFT (Lower is better)
    if (currentColumnID == 'ttft') {
      if (params.value <= TTFTDefinition.bestPerformance) {
        return { backgroundColor: BestColor.hex };
      } else if (params.value >= TTFTDefinition.worstPerformance) {
        return { backgroundColor: WorstColor.hex };
      }
    }
    // TPS (Higher is better)
    else if (currentColumnID == 'tps') {
      if (params.value >= TPSDefinition.bestPerformance) {
        return { backgroundColor: BestColor.hex };
      } else if (params.value <= TPSDefinition.worstPerformance) {
        return { backgroundColor: WorstColor.hex };
      }
    }
    // Total Time (Lower is better)
    else if (currentColumnID == 'total_time') {
      if (params.value <= TotalTimeDefinition.bestPerformance) {
        return { backgroundColor: BestColor.hex };
      } else if (params.value >= TotalTimeDefinition.worstPerformance) {
        return { backgroundColor: WorstColor.hex };
      }
    }

    return { };
  };

  function setCellFormatter() {
    const columnDefs = gridApi.getColumnDefs();
    columnDefs.forEach((colDef, index) => {
      // Only apply the formatter for ttft, tps
      if(colDef.colId == 'ttft' || colDef.colId == 'tps' || colDef.colId == 'total_time') {
        colDef.cellStyle = colFunction;
      }      
    });
    gridApi.setGridOption("columnDefs", columnDefs);
  };

  async function onDOMContentLoaded() {
    gridData = await fetchLocalJsonFile(localData);

    // setup the grid after the page has finished loading
    var gridDiv = document.querySelector("#myGrid");
    gridApi = createGrid(gridDiv, gridOptions);
    setGridData(selectedRegion, gridData);   // default to sea region on load
    setCellFormatter();

    // Add text for our last updated date
    const ourDiv = document.getElementById('lastUpdated');
    // ourDiv.classList.add('text-base', 'font-mono', 'italic', 'text-right');
    ourDiv.innerText = `Last Updated: ${gridData[0].time.split('T')[0]}`;

    // Add an event listener to the radio buttons to filter the grid data
    document.getElementById('benchmarks').addEventListener('change', function(event) {
      // Filter the grid data based on the selected region
      if (event.target.name === 'selectedRegion') {
        setGridData(event.target.value, gridData);
      }
    });
  }

  if (document.readyState === "loading") {
      // The document is still loading, add the event listener normally
      document.addEventListener("DOMContentLoaded", onDOMContentLoaded);
  } else {
      // The DOMContentLoaded event has already fired, call the function directly
      onDOMContentLoaded();
  }

</script>



