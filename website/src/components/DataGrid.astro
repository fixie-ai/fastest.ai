---
// Import the necessary CSS for AG Grid
import 'ag-grid-community/styles/ag-grid.css';
import 'ag-grid-community/styles/ag-theme-quartz.css';
---
<style>
  .ag-theme-quartz {
    font-family: monospace;
  }
</style>

<form id="benchmarks" class="text-sm">
  <label for="regionSelector" class="text-xl font-bold" >Select a Region</label>
  <div id="regionSelector" class="my-4">
    <input type="radio" id="seaRegionSelector" name="selectedRegion" value="sea" checked />
    <label for="seaRegionSelector">US West (Seattle)</label>
    <input type="radio" id="iadRegionSelector" name="selectedRegion" value="iad" />
    <label for="iadRegionSelector">US East (Virginia)</label>
    <input type="radio" id="cdgRegionSelector" name="selectedRegion" value="cdg" />
    <label for="cdgRegionSelector">Europe (Paris)</label>
  </div>
  <br />
  <div id="myGrid" class="ag-theme-quartz text-sm bg-stone-100 font-mono text-gray-950 dark:bg-stone-900 dark:text-white " style="width: 800px;"></div>
</form>

<script>
  import { createGrid } from 'ag-grid-community';
  import { BenchmarkRegions, gridOptions } from '@/utils/DataGridDefinitions.ts';
  import { generateColor } from '@/utils/DataGridColors.js';
  import { fetchLocalJsonFile } from '@/utils/FetchData.ts';

  let gridApi;
  const localData = '../../data/latest.json';
  let gridData = [];
  let selectedRegion = 'sea';
  let selectedRegionData = [];
  const startColor = '#FF7F00';  // #FF0000 red
  const endColor = '#377EB8'; // #00FF00 green
  
  function setGridData(region, gridData) {
    selectedRegion = region;
    gridData.forEach((regionData) => {
      if (regionData.region === region) {
        selectedRegionData = regionData.results;
        gridApi.setGridOption("rowData", selectedRegionData);
      }
    });
  };

  // Returns the background color for the cell based on the value
  function colFunction(params) {
    const currentColumnID = params.column.colId;
    const totalCellCount = params.api.getDisplayedRowCount();
    let allValuesInCurrentCol = [];

    selectedRegionData.forEach((x) => {
      allValuesInCurrentCol = allValuesInCurrentCol.concat(x[currentColumnID]);
    });
    
    const valuesForTableOrdered = allValuesInCurrentCol.sort(function (a, b) {
      // TTFT and Total Time: lower number is better
      if (currentColumnID === 'ttft' || currentColumnID === 'total_time') {
        return a - b;
      } else {
        return b - a;
      }
    });
    const valueIndex = valuesForTableOrdered.indexOf(params.value);
    const bgColour = generateColor(startColor, endColor, totalCellCount, valueIndex)

    return { backgroundColor: '#' + bgColour };
  };

  function setCellFormatter() {
    const columnDefs = gridApi.getColumnDefs();
    columnDefs.forEach((colDef, index) => {
      // Only apply the formatter for ttft, tps
      if(colDef.colId == 'ttft' || colDef.colId == 'tps' || colDef.colId == 'total_time') {
        colDef.cellStyle = colFunction;
      }      
    });
    gridApi.setGridOption("columnDefs", columnDefs);
  };

  async function onDOMContentLoaded() {
    gridData = await fetchLocalJsonFile(localData);

    // setup the grid after the page has finished loading
    var gridDiv = document.querySelector("#myGrid");
    gridApi = createGrid(gridDiv, gridOptions);
    setGridData(selectedRegion, gridData);   // default to sea region on load
    setCellFormatter();

    // Add text for our last updated date
    const newDiv = document.createElement('div');
    newDiv.classList.add('text-base', 'font-mono', 'italic', 'text-right');
    newDiv.innerText = `Last Updated: ${gridData[0].time.split('T')[0]}`;
    gridDiv.appendChild(newDiv);

    // Add an event listener to the radio buttons to filter the grid data
    document.getElementById('benchmarks').addEventListener('change', function(event) {
      // Filter the grid data based on the selected region
      if (event.target.name === 'selectedRegion') {
        setGridData(event.target.value, gridData);
      }
    });
  }

  if (document.readyState === "loading") {
      // The document is still loading, add the event listener normally
      document.addEventListener("DOMContentLoaded", onDOMContentLoaded);
  } else {
      // The DOMContentLoaded event has already fired, call the function directly
      onDOMContentLoaded();
  }

</script>



